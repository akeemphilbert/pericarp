// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
	"time"
)

// Ensure, that EventMock does implement Event.
// If this is not the case, regenerate this file with moq.
var _ Event = &EventMock{}

// EventMock is a mock implementation of Event.
//
//	func TestSomethingThatUsesEvent(t *testing.T) {
//
//		// make and configure a mocked Event
//		mockedEvent := &EventMock{
//			AggregateIDFunc: func() string {
//				panic("mock out the AggregateID method")
//			},
//			EventTypeFunc: func() string {
//				panic("mock out the EventType method")
//			},
//			OccurredAtFunc: func() time.Time {
//				panic("mock out the OccurredAt method")
//			},
//			VersionFunc: func() int {
//				panic("mock out the Version method")
//			},
//		}
//
//		// use mockedEvent in code that requires Event
//		// and then make assertions.
//
//	}
type EventMock struct {
	// AggregateIDFunc mocks the AggregateID method.
	AggregateIDFunc func() string

	// EventTypeFunc mocks the EventType method.
	EventTypeFunc func() string

	// OccurredAtFunc mocks the OccurredAt method.
	OccurredAtFunc func() time.Time

	// VersionFunc mocks the Version method.
	VersionFunc func() int

	// calls tracks calls to the methods.
	calls struct {
		// AggregateID holds details about calls to the AggregateID method.
		AggregateID []struct {
		}
		// EventType holds details about calls to the EventType method.
		EventType []struct {
		}
		// OccurredAt holds details about calls to the OccurredAt method.
		OccurredAt []struct {
		}
		// Version holds details about calls to the Version method.
		Version []struct {
		}
	}
	lockAggregateID sync.RWMutex
	lockEventType   sync.RWMutex
	lockOccurredAt  sync.RWMutex
	lockVersion     sync.RWMutex
}

// AggregateID calls AggregateIDFunc.
func (mock *EventMock) AggregateID() string {
	if mock.AggregateIDFunc == nil {
		panic("EventMock.AggregateIDFunc: method is nil but Event.AggregateID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAggregateID.Lock()
	mock.calls.AggregateID = append(mock.calls.AggregateID, callInfo)
	mock.lockAggregateID.Unlock()
	return mock.AggregateIDFunc()
}

// AggregateIDCalls gets all the calls that were made to AggregateID.
// Check the length with:
//
//	len(mockedEvent.AggregateIDCalls())
func (mock *EventMock) AggregateIDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAggregateID.RLock()
	calls = mock.calls.AggregateID
	mock.lockAggregateID.RUnlock()
	return calls
}

// EventType calls EventTypeFunc.
func (mock *EventMock) EventType() string {
	if mock.EventTypeFunc == nil {
		panic("EventMock.EventTypeFunc: method is nil but Event.EventType was just called")
	}
	callInfo := struct {
	}{}
	mock.lockEventType.Lock()
	mock.calls.EventType = append(mock.calls.EventType, callInfo)
	mock.lockEventType.Unlock()
	return mock.EventTypeFunc()
}

// EventTypeCalls gets all the calls that were made to EventType.
// Check the length with:
//
//	len(mockedEvent.EventTypeCalls())
func (mock *EventMock) EventTypeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockEventType.RLock()
	calls = mock.calls.EventType
	mock.lockEventType.RUnlock()
	return calls
}

// OccurredAt calls OccurredAtFunc.
func (mock *EventMock) OccurredAt() time.Time {
	if mock.OccurredAtFunc == nil {
		panic("EventMock.OccurredAtFunc: method is nil but Event.OccurredAt was just called")
	}
	callInfo := struct {
	}{}
	mock.lockOccurredAt.Lock()
	mock.calls.OccurredAt = append(mock.calls.OccurredAt, callInfo)
	mock.lockOccurredAt.Unlock()
	return mock.OccurredAtFunc()
}

// OccurredAtCalls gets all the calls that were made to OccurredAt.
// Check the length with:
//
//	len(mockedEvent.OccurredAtCalls())
func (mock *EventMock) OccurredAtCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockOccurredAt.RLock()
	calls = mock.calls.OccurredAt
	mock.lockOccurredAt.RUnlock()
	return calls
}

// Version calls VersionFunc.
func (mock *EventMock) Version() int {
	if mock.VersionFunc == nil {
		panic("EventMock.VersionFunc: method is nil but Event.Version was just called")
	}
	callInfo := struct {
	}{}
	mock.lockVersion.Lock()
	mock.calls.Version = append(mock.calls.Version, callInfo)
	mock.lockVersion.Unlock()
	return mock.VersionFunc()
}

// VersionCalls gets all the calls that were made to Version.
// Check the length with:
//
//	len(mockedEvent.VersionCalls())
func (mock *EventMock) VersionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockVersion.RLock()
	calls = mock.calls.Version
	mock.lockVersion.RUnlock()
	return calls
}
