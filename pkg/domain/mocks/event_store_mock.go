// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"context"
	"sync"
)

// Ensure, that EventStoreMock does implement EventStore.
// If this is not the case, regenerate this file with moq.
var _ EventStore = &EventStoreMock{}

// EventStoreMock is a mock implementation of EventStore.
//
//	func TestSomethingThatUsesEventStore(t *testing.T) {
//
//		// make and configure a mocked EventStore
//		mockedEventStore := &EventStoreMock{
//			LoadFunc: func(ctx context.Context, aggregateID string) ([]Envelope, error) {
//				panic("mock out the Load method")
//			},
//			LoadFromVersionFunc: func(ctx context.Context, aggregateID string, version int) ([]Envelope, error) {
//				panic("mock out the LoadFromVersion method")
//			},
//			SaveFunc: func(ctx context.Context, events []Event) ([]Envelope, error) {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedEventStore in code that requires EventStore
//		// and then make assertions.
//
//	}
type EventStoreMock struct {
	// LoadFunc mocks the Load method.
	LoadFunc func(ctx context.Context, aggregateID string) ([]Envelope, error)

	// LoadFromVersionFunc mocks the LoadFromVersion method.
	LoadFromVersionFunc func(ctx context.Context, aggregateID string, version int) ([]Envelope, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, events []Event) ([]Envelope, error)

	// calls tracks calls to the methods.
	calls struct {
		// Load holds details about calls to the Load method.
		Load []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AggregateID is the aggregateID argument value.
			AggregateID string
		}
		// LoadFromVersion holds details about calls to the LoadFromVersion method.
		LoadFromVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AggregateID is the aggregateID argument value.
			AggregateID string
			// Version is the version argument value.
			Version int
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Events is the events argument value.
			Events []Event
		}
	}
	lockLoad            sync.RWMutex
	lockLoadFromVersion sync.RWMutex
	lockSave            sync.RWMutex
}

// Load calls LoadFunc.
func (mock *EventStoreMock) Load(ctx context.Context, aggregateID string) ([]Envelope, error) {
	if mock.LoadFunc == nil {
		panic("EventStoreMock.LoadFunc: method is nil but EventStore.Load was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AggregateID string
	}{
		Ctx:         ctx,
		AggregateID: aggregateID,
	}
	mock.lockLoad.Lock()
	mock.calls.Load = append(mock.calls.Load, callInfo)
	mock.lockLoad.Unlock()
	return mock.LoadFunc(ctx, aggregateID)
}

// LoadCalls gets all the calls that were made to Load.
// Check the length with:
//
//	len(mockedEventStore.LoadCalls())
func (mock *EventStoreMock) LoadCalls() []struct {
	Ctx         context.Context
	AggregateID string
} {
	var calls []struct {
		Ctx         context.Context
		AggregateID string
	}
	mock.lockLoad.RLock()
	calls = mock.calls.Load
	mock.lockLoad.RUnlock()
	return calls
}

// LoadFromVersion calls LoadFromVersionFunc.
func (mock *EventStoreMock) LoadFromVersion(ctx context.Context, aggregateID string, version int) ([]Envelope, error) {
	if mock.LoadFromVersionFunc == nil {
		panic("EventStoreMock.LoadFromVersionFunc: method is nil but EventStore.LoadFromVersion was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AggregateID string
		Version     int
	}{
		Ctx:         ctx,
		AggregateID: aggregateID,
		Version:     version,
	}
	mock.lockLoadFromVersion.Lock()
	mock.calls.LoadFromVersion = append(mock.calls.LoadFromVersion, callInfo)
	mock.lockLoadFromVersion.Unlock()
	return mock.LoadFromVersionFunc(ctx, aggregateID, version)
}

// LoadFromVersionCalls gets all the calls that were made to LoadFromVersion.
// Check the length with:
//
//	len(mockedEventStore.LoadFromVersionCalls())
func (mock *EventStoreMock) LoadFromVersionCalls() []struct {
	Ctx         context.Context
	AggregateID string
	Version     int
} {
	var calls []struct {
		Ctx         context.Context
		AggregateID string
		Version     int
	}
	mock.lockLoadFromVersion.RLock()
	calls = mock.calls.LoadFromVersion
	mock.lockLoadFromVersion.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *EventStoreMock) Save(ctx context.Context, events []Event) ([]Envelope, error) {
	if mock.SaveFunc == nil {
		panic("EventStoreMock.SaveFunc: method is nil but EventStore.Save was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Events []Event
	}{
		Ctx:    ctx,
		Events: events,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, events)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedEventStore.SaveCalls())
func (mock *EventStoreMock) SaveCalls() []struct {
	Ctx    context.Context
	Events []Event
} {
	var calls []struct {
		Ctx    context.Context
		Events []Event
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
