// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/akeemphilbert/pericarp/pkg/domain"
	"sync"
)

// Ensure, that UnitOfWorkMock does implement domain.UnitOfWork.
// If this is not the case, regenerate this file with moq.
var _ domain.UnitOfWork = &UnitOfWorkMock{}

// UnitOfWorkMock is a mock implementation of domain.UnitOfWork.
//
//	func TestSomethingThatUsesUnitOfWork(t *testing.T) {
//
//		// make and configure a mocked domain.UnitOfWork
//		mockedUnitOfWork := &UnitOfWorkMock{
//			CommitFunc: func(ctx context.Context) ([]domain.Envelope, error) {
//				panic("mock out the Commit method")
//			},
//			RegisterEventsFunc: func(events []domain.Event)  {
//				panic("mock out the RegisterEvents method")
//			},
//			RollbackFunc: func() error {
//				panic("mock out the Rollback method")
//			},
//		}
//
//		// use mockedUnitOfWork in code that requires domain.UnitOfWork
//		// and then make assertions.
//
//	}
type UnitOfWorkMock struct {
	// CommitFunc mocks the Commit method.
	CommitFunc func(ctx context.Context) ([]domain.Envelope, error)

	// RegisterEventsFunc mocks the RegisterEvents method.
	RegisterEventsFunc func(events []domain.Event)

	// RollbackFunc mocks the Rollback method.
	RollbackFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Commit holds details about calls to the Commit method.
		Commit []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// RegisterEvents holds details about calls to the RegisterEvents method.
		RegisterEvents []struct {
			// Events is the events argument value.
			Events []domain.Event
		}
		// Rollback holds details about calls to the Rollback method.
		Rollback []struct {
		}
	}
	lockCommit         sync.RWMutex
	lockRegisterEvents sync.RWMutex
	lockRollback       sync.RWMutex
}

// Commit calls CommitFunc.
func (mock *UnitOfWorkMock) Commit(ctx context.Context) ([]domain.Envelope, error) {
	if mock.CommitFunc == nil {
		panic("UnitOfWorkMock.CommitFunc: method is nil but UnitOfWork.Commit was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCommit.Lock()
	mock.calls.Commit = append(mock.calls.Commit, callInfo)
	mock.lockCommit.Unlock()
	return mock.CommitFunc(ctx)
}

// CommitCalls gets all the calls that were made to Commit.
// Check the length with:
//
//	len(mockedUnitOfWork.CommitCalls())
func (mock *UnitOfWorkMock) CommitCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCommit.RLock()
	calls = mock.calls.Commit
	mock.lockCommit.RUnlock()
	return calls
}

// RegisterEvents calls RegisterEventsFunc.
func (mock *UnitOfWorkMock) RegisterEvents(events []domain.Event) {
	if mock.RegisterEventsFunc == nil {
		panic("UnitOfWorkMock.RegisterEventsFunc: method is nil but UnitOfWork.RegisterEvents was just called")
	}
	callInfo := struct {
		Events []domain.Event
	}{
		Events: events,
	}
	mock.lockRegisterEvents.Lock()
	mock.calls.RegisterEvents = append(mock.calls.RegisterEvents, callInfo)
	mock.lockRegisterEvents.Unlock()
	mock.RegisterEventsFunc(events)
}

// RegisterEventsCalls gets all the calls that were made to RegisterEvents.
// Check the length with:
//
//	len(mockedUnitOfWork.RegisterEventsCalls())
func (mock *UnitOfWorkMock) RegisterEventsCalls() []struct {
	Events []domain.Event
} {
	var calls []struct {
		Events []domain.Event
	}
	mock.lockRegisterEvents.RLock()
	calls = mock.calls.RegisterEvents
	mock.lockRegisterEvents.RUnlock()
	return calls
}

// Rollback calls RollbackFunc.
func (mock *UnitOfWorkMock) Rollback() error {
	if mock.RollbackFunc == nil {
		panic("UnitOfWorkMock.RollbackFunc: method is nil but UnitOfWork.Rollback was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRollback.Lock()
	mock.calls.Rollback = append(mock.calls.Rollback, callInfo)
	mock.lockRollback.Unlock()
	return mock.RollbackFunc()
}

// RollbackCalls gets all the calls that were made to Rollback.
// Check the length with:
//
//	len(mockedUnitOfWork.RollbackCalls())
func (mock *UnitOfWorkMock) RollbackCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRollback.RLock()
	calls = mock.calls.Rollback
	mock.lockRollback.RUnlock()
	return calls
}
