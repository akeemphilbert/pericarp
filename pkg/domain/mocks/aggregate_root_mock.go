// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

// Ensure, that AggregateRootMock does implement AggregateRoot.
// If this is not the case, regenerate this file with moq.
var _ AggregateRoot = &AggregateRootMock{}

// AggregateRootMock is a mock implementation of AggregateRoot.
//
//	func TestSomethingThatUsesAggregateRoot(t *testing.T) {
//
//		// make and configure a mocked AggregateRoot
//		mockedAggregateRoot := &AggregateRootMock{
//			IDFunc: func() string {
//				panic("mock out the ID method")
//			},
//			LoadFromHistoryFunc: func(events []Event)  {
//				panic("mock out the LoadFromHistory method")
//			},
//			MarkEventsAsCommittedFunc: func()  {
//				panic("mock out the MarkEventsAsCommitted method")
//			},
//			UncommittedEventsFunc: func() []Event {
//				panic("mock out the UncommittedEvents method")
//			},
//			VersionFunc: func() int {
//				panic("mock out the Version method")
//			},
//		}
//
//		// use mockedAggregateRoot in code that requires AggregateRoot
//		// and then make assertions.
//
//	}
type AggregateRootMock struct {
	// IDFunc mocks the ID method.
	IDFunc func() string

	// LoadFromHistoryFunc mocks the LoadFromHistory method.
	LoadFromHistoryFunc func(events []Event)

	// MarkEventsAsCommittedFunc mocks the MarkEventsAsCommitted method.
	MarkEventsAsCommittedFunc func()

	// UncommittedEventsFunc mocks the UncommittedEvents method.
	UncommittedEventsFunc func() []Event

	// VersionFunc mocks the Version method.
	VersionFunc func() int

	// calls tracks calls to the methods.
	calls struct {
		// ID holds details about calls to the ID method.
		ID []struct {
		}
		// LoadFromHistory holds details about calls to the LoadFromHistory method.
		LoadFromHistory []struct {
			// Events is the events argument value.
			Events []Event
		}
		// MarkEventsAsCommitted holds details about calls to the MarkEventsAsCommitted method.
		MarkEventsAsCommitted []struct {
		}
		// UncommittedEvents holds details about calls to the UncommittedEvents method.
		UncommittedEvents []struct {
		}
		// Version holds details about calls to the Version method.
		Version []struct {
		}
	}
	lockID                    sync.RWMutex
	lockLoadFromHistory       sync.RWMutex
	lockMarkEventsAsCommitted sync.RWMutex
	lockUncommittedEvents     sync.RWMutex
	lockVersion               sync.RWMutex
}

// ID calls IDFunc.
func (mock *AggregateRootMock) ID() string {
	if mock.IDFunc == nil {
		panic("AggregateRootMock.IDFunc: method is nil but AggregateRoot.ID was just called")
	}
	callInfo := struct {
	}{}
	mock.lockID.Lock()
	mock.calls.ID = append(mock.calls.ID, callInfo)
	mock.lockID.Unlock()
	return mock.IDFunc()
}

// IDCalls gets all the calls that were made to ID.
// Check the length with:
//
//	len(mockedAggregateRoot.IDCalls())
func (mock *AggregateRootMock) IDCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockID.RLock()
	calls = mock.calls.ID
	mock.lockID.RUnlock()
	return calls
}

// LoadFromHistory calls LoadFromHistoryFunc.
func (mock *AggregateRootMock) LoadFromHistory(events []Event) {
	if mock.LoadFromHistoryFunc == nil {
		panic("AggregateRootMock.LoadFromHistoryFunc: method is nil but AggregateRoot.LoadFromHistory was just called")
	}
	callInfo := struct {
		Events []Event
	}{
		Events: events,
	}
	mock.lockLoadFromHistory.Lock()
	mock.calls.LoadFromHistory = append(mock.calls.LoadFromHistory, callInfo)
	mock.lockLoadFromHistory.Unlock()
	mock.LoadFromHistoryFunc(events)
}

// LoadFromHistoryCalls gets all the calls that were made to LoadFromHistory.
// Check the length with:
//
//	len(mockedAggregateRoot.LoadFromHistoryCalls())
func (mock *AggregateRootMock) LoadFromHistoryCalls() []struct {
	Events []Event
} {
	var calls []struct {
		Events []Event
	}
	mock.lockLoadFromHistory.RLock()
	calls = mock.calls.LoadFromHistory
	mock.lockLoadFromHistory.RUnlock()
	return calls
}

// MarkEventsAsCommitted calls MarkEventsAsCommittedFunc.
func (mock *AggregateRootMock) MarkEventsAsCommitted() {
	if mock.MarkEventsAsCommittedFunc == nil {
		panic("AggregateRootMock.MarkEventsAsCommittedFunc: method is nil but AggregateRoot.MarkEventsAsCommitted was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMarkEventsAsCommitted.Lock()
	mock.calls.MarkEventsAsCommitted = append(mock.calls.MarkEventsAsCommitted, callInfo)
	mock.lockMarkEventsAsCommitted.Unlock()
	mock.MarkEventsAsCommittedFunc()
}

// MarkEventsAsCommittedCalls gets all the calls that were made to MarkEventsAsCommitted.
// Check the length with:
//
//	len(mockedAggregateRoot.MarkEventsAsCommittedCalls())
func (mock *AggregateRootMock) MarkEventsAsCommittedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMarkEventsAsCommitted.RLock()
	calls = mock.calls.MarkEventsAsCommitted
	mock.lockMarkEventsAsCommitted.RUnlock()
	return calls
}

// UncommittedEvents calls UncommittedEventsFunc.
func (mock *AggregateRootMock) UncommittedEvents() []Event {
	if mock.UncommittedEventsFunc == nil {
		panic("AggregateRootMock.UncommittedEventsFunc: method is nil but AggregateRoot.UncommittedEvents was just called")
	}
	callInfo := struct {
	}{}
	mock.lockUncommittedEvents.Lock()
	mock.calls.UncommittedEvents = append(mock.calls.UncommittedEvents, callInfo)
	mock.lockUncommittedEvents.Unlock()
	return mock.UncommittedEventsFunc()
}

// UncommittedEventsCalls gets all the calls that were made to UncommittedEvents.
// Check the length with:
//
//	len(mockedAggregateRoot.UncommittedEventsCalls())
func (mock *AggregateRootMock) UncommittedEventsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockUncommittedEvents.RLock()
	calls = mock.calls.UncommittedEvents
	mock.lockUncommittedEvents.RUnlock()
	return calls
}

// Version calls VersionFunc.
func (mock *AggregateRootMock) Version() int {
	if mock.VersionFunc == nil {
		panic("AggregateRootMock.VersionFunc: method is nil but AggregateRoot.Version was just called")
	}
	callInfo := struct {
	}{}
	mock.lockVersion.Lock()
	mock.calls.Version = append(mock.calls.Version, callInfo)
	mock.lockVersion.Unlock()
	return mock.VersionFunc()
}

// VersionCalls gets all the calls that were made to Version.
// Check the length with:
//
//	len(mockedAggregateRoot.VersionCalls())
func (mock *AggregateRootMock) VersionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockVersion.RLock()
	calls = mock.calls.Version
	mock.lockVersion.RUnlock()
	return calls
}
