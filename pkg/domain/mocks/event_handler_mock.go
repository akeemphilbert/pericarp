// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"context"
	"sync"
)

// Ensure, that EventHandlerMock does implement EventHandler.
// If this is not the case, regenerate this file with moq.
var _ EventHandler = &EventHandlerMock{}

// EventHandlerMock is a mock implementation of EventHandler.
//
//	func TestSomethingThatUsesEventHandler(t *testing.T) {
//
//		// make and configure a mocked EventHandler
//		mockedEventHandler := &EventHandlerMock{
//			EventTypesFunc: func() []string {
//				panic("mock out the EventTypes method")
//			},
//			HandleFunc: func(ctx context.Context, envelope Envelope) error {
//				panic("mock out the Handle method")
//			},
//		}
//
//		// use mockedEventHandler in code that requires EventHandler
//		// and then make assertions.
//
//	}
type EventHandlerMock struct {
	// EventTypesFunc mocks the EventTypes method.
	EventTypesFunc func() []string

	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context, envelope Envelope) error

	// calls tracks calls to the methods.
	calls struct {
		// EventTypes holds details about calls to the EventTypes method.
		EventTypes []struct {
		}
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Envelope is the envelope argument value.
			Envelope Envelope
		}
	}
	lockEventTypes sync.RWMutex
	lockHandle     sync.RWMutex
}

// EventTypes calls EventTypesFunc.
func (mock *EventHandlerMock) EventTypes() []string {
	if mock.EventTypesFunc == nil {
		panic("EventHandlerMock.EventTypesFunc: method is nil but EventHandler.EventTypes was just called")
	}
	callInfo := struct {
	}{}
	mock.lockEventTypes.Lock()
	mock.calls.EventTypes = append(mock.calls.EventTypes, callInfo)
	mock.lockEventTypes.Unlock()
	return mock.EventTypesFunc()
}

// EventTypesCalls gets all the calls that were made to EventTypes.
// Check the length with:
//
//	len(mockedEventHandler.EventTypesCalls())
func (mock *EventHandlerMock) EventTypesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockEventTypes.RLock()
	calls = mock.calls.EventTypes
	mock.lockEventTypes.RUnlock()
	return calls
}

// Handle calls HandleFunc.
func (mock *EventHandlerMock) Handle(ctx context.Context, envelope Envelope) error {
	if mock.HandleFunc == nil {
		panic("EventHandlerMock.HandleFunc: method is nil but EventHandler.Handle was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Envelope Envelope
	}{
		Ctx:      ctx,
		Envelope: envelope,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(ctx, envelope)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//
//	len(mockedEventHandler.HandleCalls())
func (mock *EventHandlerMock) HandleCalls() []struct {
	Ctx      context.Context
	Envelope Envelope
} {
	var calls []struct {
		Ctx      context.Context
		Envelope Envelope
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}
