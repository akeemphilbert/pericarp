// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"context"
	"sync"
)

// Ensure, that EventDispatcherMock does implement EventDispatcher.
// If this is not the case, regenerate this file with moq.
var _ EventDispatcher = &EventDispatcherMock{}

// EventDispatcherMock is a mock implementation of EventDispatcher.
//
//	func TestSomethingThatUsesEventDispatcher(t *testing.T) {
//
//		// make and configure a mocked EventDispatcher
//		mockedEventDispatcher := &EventDispatcherMock{
//			DispatchFunc: func(ctx context.Context, envelopes []Envelope) error {
//				panic("mock out the Dispatch method")
//			},
//			SubscribeFunc: func(eventType string, handler EventHandler) error {
//				panic("mock out the Subscribe method")
//			},
//		}
//
//		// use mockedEventDispatcher in code that requires EventDispatcher
//		// and then make assertions.
//
//	}
type EventDispatcherMock struct {
	// DispatchFunc mocks the Dispatch method.
	DispatchFunc func(ctx context.Context, envelopes []Envelope) error

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(eventType string, handler EventHandler) error

	// calls tracks calls to the methods.
	calls struct {
		// Dispatch holds details about calls to the Dispatch method.
		Dispatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Envelopes is the envelopes argument value.
			Envelopes []Envelope
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// EventType is the eventType argument value.
			EventType string
			// Handler is the handler argument value.
			Handler EventHandler
		}
	}
	lockDispatch  sync.RWMutex
	lockSubscribe sync.RWMutex
}

// Dispatch calls DispatchFunc.
func (mock *EventDispatcherMock) Dispatch(ctx context.Context, envelopes []Envelope) error {
	if mock.DispatchFunc == nil {
		panic("EventDispatcherMock.DispatchFunc: method is nil but EventDispatcher.Dispatch was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Envelopes []Envelope
	}{
		Ctx:       ctx,
		Envelopes: envelopes,
	}
	mock.lockDispatch.Lock()
	mock.calls.Dispatch = append(mock.calls.Dispatch, callInfo)
	mock.lockDispatch.Unlock()
	return mock.DispatchFunc(ctx, envelopes)
}

// DispatchCalls gets all the calls that were made to Dispatch.
// Check the length with:
//
//	len(mockedEventDispatcher.DispatchCalls())
func (mock *EventDispatcherMock) DispatchCalls() []struct {
	Ctx       context.Context
	Envelopes []Envelope
} {
	var calls []struct {
		Ctx       context.Context
		Envelopes []Envelope
	}
	mock.lockDispatch.RLock()
	calls = mock.calls.Dispatch
	mock.lockDispatch.RUnlock()
	return calls
}

// Subscribe calls SubscribeFunc.
func (mock *EventDispatcherMock) Subscribe(eventType string, handler EventHandler) error {
	if mock.SubscribeFunc == nil {
		panic("EventDispatcherMock.SubscribeFunc: method is nil but EventDispatcher.Subscribe was just called")
	}
	callInfo := struct {
		EventType string
		Handler   EventHandler
	}{
		EventType: eventType,
		Handler:   handler,
	}
	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	mock.lockSubscribe.Unlock()
	return mock.SubscribeFunc(eventType, handler)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//
//	len(mockedEventDispatcher.SubscribeCalls())
func (mock *EventDispatcherMock) SubscribeCalls() []struct {
	EventType string
	Handler   EventHandler
} {
	var calls []struct {
		EventType string
		Handler   EventHandler
	}
	mock.lockSubscribe.RLock()
	calls = mock.calls.Subscribe
	mock.lockSubscribe.RUnlock()
	return calls
}
