// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"context"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository[AggregateRoot] = &RepositoryMock[AggregateRoot]{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			LoadFunc: func(ctx context.Context, id string) (T, error) {
//				panic("mock out the Load method")
//			},
//			SaveFunc: func(ctx context.Context, aggregate T) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock[T AggregateRoot] struct {
	// LoadFunc mocks the Load method.
	LoadFunc func(ctx context.Context, id string) (T, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, aggregate T) error

	// calls tracks calls to the methods.
	calls struct {
		// Load holds details about calls to the Load method.
		Load []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Aggregate is the aggregate argument value.
			Aggregate T
		}
	}
	lockLoad sync.RWMutex
	lockSave sync.RWMutex
}

// Load calls LoadFunc.
func (mock *RepositoryMock[T]) Load(ctx context.Context, id string) (T, error) {
	if mock.LoadFunc == nil {
		panic("RepositoryMock.LoadFunc: method is nil but Repository.Load was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockLoad.Lock()
	mock.calls.Load = append(mock.calls.Load, callInfo)
	mock.lockLoad.Unlock()
	return mock.LoadFunc(ctx, id)
}

// LoadCalls gets all the calls that were made to Load.
// Check the length with:
//
//	len(mockedRepository.LoadCalls())
func (mock *RepositoryMock[T]) LoadCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockLoad.RLock()
	calls = mock.calls.Load
	mock.lockLoad.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *RepositoryMock[T]) Save(ctx context.Context, aggregate T) error {
	if mock.SaveFunc == nil {
		panic("RepositoryMock.SaveFunc: method is nil but Repository.Save was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Aggregate T
	}{
		Ctx:       ctx,
		Aggregate: aggregate,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, aggregate)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedRepository.SaveCalls())
func (mock *RepositoryMock[T]) SaveCalls() []struct {
	Ctx       context.Context
	Aggregate T
} {
	var calls []struct {
		Ctx       context.Context
		Aggregate T
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
