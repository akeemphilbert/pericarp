// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/akeemphilbert/pericarp/internal/application"
	"github.com/segmentio/ksuid"
	"sync"
)

// Ensure, that UserReadModelRepositoryMock does implement application.UserReadModelRepository.
// If this is not the case, regenerate this file with moq.
var _ application.UserReadModelRepository = &UserReadModelRepositoryMock{}

// UserReadModelRepositoryMock is a mock implementation of application.UserReadModelRepository.
//
//	func TestSomethingThatUsesUserReadModelRepository(t *testing.T) {
//
//		// make and configure a mocked application.UserReadModelRepository
//		mockedUserReadModelRepository := &UserReadModelRepositoryMock{
//			CountFunc: func(ctx context.Context, active *bool) (int, error) {
//				panic("mock out the Count method")
//			},
//			DeleteFunc: func(ctx context.Context, id ksuid.KSUID) error {
//				panic("mock out the Delete method")
//			},
//			GetByEmailFunc: func(ctx context.Context, email string) (*application.UserReadModel, error) {
//				panic("mock out the GetByEmail method")
//			},
//			GetByIDFunc: func(ctx context.Context, id ksuid.KSUID) (*application.UserReadModel, error) {
//				panic("mock out the GetByID method")
//			},
//			ListFunc: func(ctx context.Context, page int, pageSize int, active *bool) ([]application.UserReadModel, int, error) {
//				panic("mock out the List method")
//			},
//			SaveFunc: func(ctx context.Context, user *application.UserReadModel) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedUserReadModelRepository in code that requires application.UserReadModelRepository
//		// and then make assertions.
//
//	}
type UserReadModelRepositoryMock struct {
	// CountFunc mocks the Count method.
	CountFunc func(ctx context.Context, active *bool) (int, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id ksuid.KSUID) error

	// GetByEmailFunc mocks the GetByEmail method.
	GetByEmailFunc func(ctx context.Context, email string) (*application.UserReadModel, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id ksuid.KSUID) (*application.UserReadModel, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, page int, pageSize int, active *bool) ([]application.UserReadModel, int, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, user *application.UserReadModel) error

	// calls tracks calls to the methods.
	calls struct {
		// Count holds details about calls to the Count method.
		Count []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Active is the active argument value.
			Active *bool
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID ksuid.KSUID
		}
		// GetByEmail holds details about calls to the GetByEmail method.
		GetByEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID ksuid.KSUID
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Page is the page argument value.
			Page int
			// PageSize is the pageSize argument value.
			PageSize int
			// Active is the active argument value.
			Active *bool
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *application.UserReadModel
		}
	}
	lockCount      sync.RWMutex
	lockDelete     sync.RWMutex
	lockGetByEmail sync.RWMutex
	lockGetByID    sync.RWMutex
	lockList       sync.RWMutex
	lockSave       sync.RWMutex
}

// Count calls CountFunc.
func (mock *UserReadModelRepositoryMock) Count(ctx context.Context, active *bool) (int, error) {
	if mock.CountFunc == nil {
		panic("UserReadModelRepositoryMock.CountFunc: method is nil but UserReadModelRepository.Count was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Active *bool
	}{
		Ctx:    ctx,
		Active: active,
	}
	mock.lockCount.Lock()
	mock.calls.Count = append(mock.calls.Count, callInfo)
	mock.lockCount.Unlock()
	return mock.CountFunc(ctx, active)
}

// CountCalls gets all the calls that were made to Count.
// Check the length with:
//
//	len(mockedUserReadModelRepository.CountCalls())
func (mock *UserReadModelRepositoryMock) CountCalls() []struct {
	Ctx    context.Context
	Active *bool
} {
	var calls []struct {
		Ctx    context.Context
		Active *bool
	}
	mock.lockCount.RLock()
	calls = mock.calls.Count
	mock.lockCount.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *UserReadModelRepositoryMock) Delete(ctx context.Context, id ksuid.KSUID) error {
	if mock.DeleteFunc == nil {
		panic("UserReadModelRepositoryMock.DeleteFunc: method is nil but UserReadModelRepository.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  ksuid.KSUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedUserReadModelRepository.DeleteCalls())
func (mock *UserReadModelRepositoryMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  ksuid.KSUID
} {
	var calls []struct {
		Ctx context.Context
		ID  ksuid.KSUID
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// GetByEmail calls GetByEmailFunc.
func (mock *UserReadModelRepositoryMock) GetByEmail(ctx context.Context, email string) (*application.UserReadModel, error) {
	if mock.GetByEmailFunc == nil {
		panic("UserReadModelRepositoryMock.GetByEmailFunc: method is nil but UserReadModelRepository.GetByEmail was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Email string
	}{
		Ctx:   ctx,
		Email: email,
	}
	mock.lockGetByEmail.Lock()
	mock.calls.GetByEmail = append(mock.calls.GetByEmail, callInfo)
	mock.lockGetByEmail.Unlock()
	return mock.GetByEmailFunc(ctx, email)
}

// GetByEmailCalls gets all the calls that were made to GetByEmail.
// Check the length with:
//
//	len(mockedUserReadModelRepository.GetByEmailCalls())
func (mock *UserReadModelRepositoryMock) GetByEmailCalls() []struct {
	Ctx   context.Context
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Email string
	}
	mock.lockGetByEmail.RLock()
	calls = mock.calls.GetByEmail
	mock.lockGetByEmail.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *UserReadModelRepositoryMock) GetByID(ctx context.Context, id ksuid.KSUID) (*application.UserReadModel, error) {
	if mock.GetByIDFunc == nil {
		panic("UserReadModelRepositoryMock.GetByIDFunc: method is nil but UserReadModelRepository.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  ksuid.KSUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedUserReadModelRepository.GetByIDCalls())
func (mock *UserReadModelRepositoryMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  ksuid.KSUID
} {
	var calls []struct {
		Ctx context.Context
		ID  ksuid.KSUID
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *UserReadModelRepositoryMock) List(ctx context.Context, page int, pageSize int, active *bool) ([]application.UserReadModel, int, error) {
	if mock.ListFunc == nil {
		panic("UserReadModelRepositoryMock.ListFunc: method is nil but UserReadModelRepository.List was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Page     int
		PageSize int
		Active   *bool
	}{
		Ctx:      ctx,
		Page:     page,
		PageSize: pageSize,
		Active:   active,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, page, pageSize, active)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedUserReadModelRepository.ListCalls())
func (mock *UserReadModelRepositoryMock) ListCalls() []struct {
	Ctx      context.Context
	Page     int
	PageSize int
	Active   *bool
} {
	var calls []struct {
		Ctx      context.Context
		Page     int
		PageSize int
		Active   *bool
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *UserReadModelRepositoryMock) Save(ctx context.Context, user *application.UserReadModel) error {
	if mock.SaveFunc == nil {
		panic("UserReadModelRepositoryMock.SaveFunc: method is nil but UserReadModelRepository.Save was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *application.UserReadModel
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, user)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedUserReadModelRepository.SaveCalls())
func (mock *UserReadModelRepositoryMock) SaveCalls() []struct {
	Ctx  context.Context
	User *application.UserReadModel
} {
	var calls []struct {
		Ctx  context.Context
		User *application.UserReadModel
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
