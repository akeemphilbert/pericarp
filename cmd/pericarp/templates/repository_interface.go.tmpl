package domain

import (
	"context"

	"github.com/segmentio/ksuid"
)

// {{.Name}}Repository defines the repository interface for {{.Name | lower}}s
// Generated repository interface following Pericarp repository patterns
type {{.Name}}Repository interface {
	// Save persists a {{.Name | lower}} aggregate
	Save(ctx context.Context, {{.Name | camelCase}} *{{.Name}}) error
	
	// Load retrieves a {{.Name | lower}} by ID
	Load(ctx context.Context, id ksuid.KSUID) (*{{.Name}}, error)
	
	// Delete removes a {{.Name | lower}} by ID
	Delete(ctx context.Context, id ksuid.KSUID) error
	
	// Exists checks if a {{.Name | lower}} exists by ID
	Exists(ctx context.Context, id ksuid.KSUID) (bool, error)
	
	{{range .Properties}}{{if eq (.Type | goType) "string"}}// FindBy{{.Name | pascalCase}} finds {{$.Name | lower}}s by {{.Name | lower}}
	FindBy{{.Name | pascalCase}}(ctx context.Context, {{.Name | camelCase}} {{.Type | goType}}) ([]*{{$.Name}}, error)
	{{end}}{{end}}
	
	// FindAll retrieves all {{.Name | lower}}s with pagination
	FindAll(ctx context.Context, limit, offset int) ([]*{{.Name}}, error)
	
	// Count returns the total number of {{.Name | lower}}s
	Count(ctx context.Context) (int64, error)
}