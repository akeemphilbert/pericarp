# Generated Makefile for {{.ProjectName}}

# Variables
BINARY_NAME={{.ProjectName}}
BINARY_PATH=bin/$(BINARY_NAME)
COVERAGE_FILE=coverage.out
COVERAGE_HTML=coverage.html
GO_VERSION=$(shell go version | cut -d ' ' -f 3)
GIT_COMMIT=$(shell git rev-parse --short HEAD 2>/dev/null || echo "unknown")
BUILD_TIME=$(shell date -u '+%Y-%m-%d_%H:%M:%S')
LDFLAGS=-ldflags "-X main.version=$(GIT_COMMIT) -X main.buildTime=$(BUILD_TIME)"

.PHONY: help build test clean deps fmt lint security gosec check install-tools

help: ## Show this help message
	@echo 'Usage: make [target]'
	@echo ''
	@echo 'Available targets:'
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Tool installation
install-tools: ## Install development tools
	@echo "Installing development tools..."
	@go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	@go install github.com/securego/gosec/v2/cmd/gosec@latest
	@go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
	@go install honnef.co/go/tools/cmd/staticcheck@latest
	@go install github.com/kisielk/errcheck@latest
	@go install golang.org/x/vuln/cmd/govulncheck@latest
	@go install github.com/golang/mock/mockgen@latest
	@echo "✅ Development tools installed"

# Dependencies
deps: ## Install and tidy dependencies
	@echo "📦 Installing dependencies..."
	@go mod download
	@go mod tidy
	@go mod verify
	@echo "✅ Dependencies installed and verified"

# Build targets
build: ## Build the application
	@echo "🔨 Building application..."
	@go build -v ./...
	@echo "✅ Build completed"

build-cmd: ## Build the main command with version info
	@echo "🔨 Building main command..."
	@mkdir -p bin
	@go build $(LDFLAGS) -o $(BINARY_PATH) ./cmd/$(BINARY_NAME)
	@echo "✅ Binary built: $(BINARY_PATH)"

build-release: ## Build optimized release binary
	@echo "🚀 Building release binary..."
	@mkdir -p bin
	@CGO_ENABLED=0 go build $(LDFLAGS) -a -installsuffix cgo -o $(BINARY_PATH) ./cmd/$(BINARY_NAME)
	@echo "✅ Release binary built: $(BINARY_PATH)"

# Testing
test: ## Run all tests with coverage
	@echo "🧪 Running tests..."
	@go test -v -race -coverprofile=$(COVERAGE_FILE) ./...
	@echo "✅ Tests completed"

test-unit: ## Run unit tests only
	@echo "🧪 Running unit tests..."
	@go test -v -race ./examples/...
	@echo "✅ Unit tests completed"

test-integration: ## Run integration tests
	@echo "🧪 Running integration tests..."
	@go test -v -tags=integration ./test/integration/...
	@echo "✅ Integration tests completed"

test-short: ## Run tests in short mode
	@echo "🧪 Running tests (short mode)..."
	@go test -short -race ./...
	@echo "✅ Short tests completed"

coverage: test ## Generate and open coverage report
	@echo "📊 Generating coverage report..."
	@go tool cover -html=$(COVERAGE_FILE) -o $(COVERAGE_HTML)
	@echo "✅ Coverage report generated: $(COVERAGE_HTML)"

coverage-func: ## Show coverage by function
	@go tool cover -func=$(COVERAGE_FILE)

benchmark: ## Run benchmarks
	@echo "⚡ Running benchmarks..."
	@go test -bench=. -benchmem ./...

# Code quality and formatting
fmt: ## Format code
	@echo "🎨 Formatting code..."
	@go fmt ./...
	@echo "✅ Code formatted"

fmt-check: ## Check if code is formatted
	@echo "🔍 Checking code formatting..."
	@test -z "$$(go fmt ./...)" || (echo "❌ Code is not formatted. Run 'make fmt'" && exit 1)
	@echo "✅ Code is properly formatted"

vet: ## Run go vet
	@echo "🔍 Running go vet..."
	@go vet ./...
	@echo "✅ go vet passed"

lint: ## Run comprehensive linting
	@echo "🔍 Running linters..."
	@golangci-lint run --timeout=5m
	@echo "✅ Linting completed"

lint-fix: ## Run linters with auto-fix
	@echo "🔧 Running linters with auto-fix..."
	@golangci-lint run --fix --timeout=5m
	@echo "✅ Linting with fixes completed"

staticcheck: ## Run staticcheck
	@echo "🔍 Running staticcheck..."
	@staticcheck ./...
	@echo "✅ staticcheck passed"

errcheck: ## Check for unchecked errors
	@echo "🔍 Checking for unchecked errors..."
	@errcheck ./...
	@echo "✅ errcheck passed"

cyclo: ## Check cyclomatic complexity
	@echo "🔍 Checking cyclomatic complexity..."
	@gocyclo -over 15 .
	@echo "✅ Complexity check completed"

# Security
gosec: ## Run security scan with gosec
	@echo "🔒 Running security scan..."
	@gosec -fmt=json -out=gosec-report.json -stdout -verbose=text ./...
	@echo "✅ Security scan completed"

vulncheck: ## Check for known vulnerabilities
	@echo "🔒 Checking for vulnerabilities..."
	@govulncheck ./...
	@echo "✅ Vulnerability check completed"

security: gosec vulncheck ## Run all security checks

# Quality gates
check: fmt-check vet lint staticcheck errcheck security test ## Run all quality checks

pre-commit: fmt lint test ## Run pre-commit checks

ci: deps check ## Run CI pipeline

# Development workflow
dev-setup: deps install-tools ## Set up development environment
	@echo "🚀 Development environment ready!"

dev-test: fmt lint test ## Run complete development workflow

run: build-cmd ## Build and run the application
	@echo "🏃 Running application..."
	@./$(BINARY_PATH)

# Clean
clean: ## Clean build artifacts
	@echo "🧹 Cleaning build artifacts..."
	@rm -rf bin/
	@rm -f $(COVERAGE_FILE) $(COVERAGE_HTML)
	@rm -f gosec-report.json
	@go clean -testcache
	@echo "✅ Clean completed"

{{if .HasDatabase}}
# Database (if applicable)
db-migrate: ## Run database migrations
	@echo "🗄️  Running database migrations..."
	@go run ./cmd/{{.ProjectName}} migrate

db-reset: ## Reset database
	@echo "🗄️  Resetting database..."
	@rm -f *.db
	@$(MAKE) db-migrate

db-seed: ## Seed database with test data
	@echo "🌱 Seeding database..."
	@go run ./cmd/{{.ProjectName}} seed
{{end}}

# Docker (if applicable)
docker-build: ## Build Docker image
	@echo "🐳 Building Docker image..."
	@docker build -t $(BINARY_NAME):latest .

docker-run: ## Run Docker container
	@echo "🐳 Running Docker container..."
	@docker run --rm -p 8080:8080 $(BINARY_NAME):latest

# Additional targets for Pericarp projects
validate-architecture: ## Validate DDD architecture
	@echo "🏗️  Validating domain-driven design architecture..."
	@go test -v ./examples/... -tags=architecture

performance-test: ## Run performance benchmarks
	@echo "⚡ Running performance tests..."
	@go test -bench=. -benchmem ./...

mock-generate: ## Generate mocks for testing
	@echo "🎭 Generating mocks..."
	@go generate ./...

# Release
release: clean build-release test ## Build release version
	@echo "🎉 Release build completed!"

# Info
info: ## Show project information
	@echo "Project: $(BINARY_NAME)"
	@echo "Go Version: $(GO_VERSION)"
	@echo "Git Commit: $(GIT_COMMIT)"
	@echo "Build Time: $(BUILD_TIME)"