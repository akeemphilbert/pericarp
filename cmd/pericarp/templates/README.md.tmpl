# {{.ProjectName | title}}

A Pericarp-based application following Domain-Driven Design principles.

## Overview

This project was generated using the Pericarp CLI tool and follows the established patterns and conventions for building domain-driven applications with event sourcing and CQRS.

## Project Structure

```
{{.ProjectName}}/
├── cmd/{{.ProjectName}}/          # Application entry point
├── internal/
│   ├── application/               # Application layer (commands, queries, handlers)
│   ├── domain/                   # Domain layer (entities, events, repositories)
│   └── infrastructure/           # Infrastructure layer (implementations)
├── pkg/                          # Shared packages
├── test/                         # Test utilities and fixtures
├── docs/                         # Documentation
└── scripts/                      # Build and deployment scripts
```

## Domain Entities

{{range .Entities}}
### {{.Name}}

{{if .Metadata.description}}{{.Metadata.description}}{{else}}A {{.Name | lower}} entity in the domain.{{end}}

**Properties:**
{{range .Properties}}
- `{{.Name}}` ({{.Type}}){{if .Required}} - Required{{end}}{{if .Validation}} - {{.Validation}}{{end}}
{{end}}

{{end}}

## Getting Started

### Prerequisites

- Go 1.21 or later
- Make (for using the Makefile)

### Installation

1. Clone the repository:
   ```bash
   git clone <repository-url>
   cd {{.ProjectName}}
   ```

2. Install dependencies:
   ```bash
   make deps
   ```

3. Run tests:
   ```bash
   make test
   ```

4. Build the application:
   ```bash
   make build
   ```

### Development

The project includes a comprehensive Makefile with common development tasks:

- `make deps` - Install dependencies
- `make test` - Run all tests
- `make test-unit` - Run unit tests only
- `make test-integration` - Run integration tests
- `make build` - Build the application
- `make lint` - Run code linting
- `make gosec` - Run security analysis
- `make clean` - Clean build artifacts

### Configuration

The application uses configuration files for different environments. Copy `config.yaml.example` to `config.yaml` and modify as needed.

## Architecture

This application follows the principles of:

- **Domain-Driven Design (DDD)** - Clear separation of domain logic
- **Event Sourcing** - State changes are captured as events
- **CQRS** - Separate models for commands and queries
- **Clean Architecture** - Dependencies point inward toward the domain

### Layers

1. **Domain Layer** (`internal/domain/`)
   - Contains business logic and domain entities
   - Defines repository interfaces
   - Domain events and business rules

2. **Application Layer** (`internal/application/`)
   - Commands and queries
   - Command and query handlers
   - Application services

3. **Infrastructure Layer** (`internal/infrastructure/`)
   - Repository implementations
   - Database access
   - External service integrations

## Testing

The project includes comprehensive test coverage:

- **Unit Tests** - Test individual components in isolation
- **Integration Tests** - Test component interactions
- **Repository Tests** - Test data access patterns

Run tests with:
```bash
make test
```

For test coverage:
```bash
make coverage
```

## Contributing

1. Follow the established patterns and conventions
2. Write tests for new functionality
3. Run `make dev-test` before committing
4. Update documentation as needed

## License

[Add your license information here]