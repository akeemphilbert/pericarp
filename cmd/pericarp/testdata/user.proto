syntax = "proto3";

package user;

option go_package = "github.com/example/user/pb";

// User represents a user in the system
message User {
  // Unique identifier for the user
  string id = 1;
  
  // User's email address
  string email = 2;
  
  // User's full name
  string name = 3;
  
  // Whether the user is active
  bool is_active = 4;
  
  // User's age
  int32 age = 5;
  
  // User's profile
  Profile profile = 6;
  
  // User's roles
  repeated string roles = 7;
  
  // User creation timestamp
  int64 created_at = 8;
  
  // User last update timestamp
  int64 updated_at = 9;
}

// Profile represents user profile information
message Profile {
  // Profile bio
  string bio = 1;
  
  // Profile avatar URL
  string avatar_url = 2;
  
  // Profile settings
  map<string, string> settings = 3;
}

// CreateUserRequest represents a request to create a user
message CreateUserRequest {
  string email = 1;
  string name = 2;
  int32 age = 3;
  Profile profile = 4;
}

// CreateUserResponse represents a response after creating a user
message CreateUserResponse {
  User user = 1;
  bool success = 2;
  string message = 3;
}

// UserService defines user-related operations
service UserService {
  // CreateUser creates a new user
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  
  // GetUser retrieves a user by ID
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  
  // UpdateUser updates an existing user
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  
  // DeleteUser deletes a user
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
}

// GetUserRequest represents a request to get a user
message GetUserRequest {
  string id = 1;
}

// GetUserResponse represents a response when getting a user
message GetUserResponse {
  User user = 1;
  bool found = 2;
}

// UpdateUserRequest represents a request to update a user
message UpdateUserRequest {
  string id = 1;
  string email = 2;
  string name = 3;
  bool is_active = 4;
  Profile profile = 5;
}

// UpdateUserResponse represents a response after updating a user
message UpdateUserResponse {
  User user = 1;
  bool success = 2;
  string message = 3;
}

// DeleteUserRequest represents a request to delete a user
message DeleteUserRequest {
  string id = 1;
}

// DeleteUserResponse represents a response after deleting a user
message DeleteUserResponse {
  bool success = 1;
  string message = 2;
}